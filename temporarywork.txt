DAY ONE TASK - 
---------------------------------------------------
1. Project 1 Plan by the participants
2. Installing Eclipse Mars, Attaching Apache Tomcat 8, Configuring Maven 3
3. Create a GitHub Profile & Exploring various options in GitHub
4. Create a Maven Project
5. Create a landing page with header, footer, carousel


You can refer the following links for task such as:

Upload Project to GitHub using Git commands -  https://www.youtube.com/watch?v=FOtx1lO9SS4
Creating GitHub Profile Website with README.md Syntax - https://www.youtube.com/watch?v=vZYRIC-OjjU

Installation
Java Programming Tutorial:Installing Java JDK and Eclipse IDE	https://www.youtube.com/watch?v=NlWZJtpptwc
Creating a Web Application with Eclipse IDE	https://www.youtube.com/watch?v=Av6zh817QEc
Steps to Plugin Maven into Eclipse IDE	https://www.youtube.com/watch?v=DaniXtrtkbo
Intro & How to Install Bootstrap 3	https://www.youtube.com/watch?v=qeXqdsCSuZg

For bootstrap I have already given you the videos for learning which could also be found at the below link:

Intro & How to Install Bootstrap 3	https://www.youtube.com/watch?v=qeXqdsCSuZg
Entire Playlist for Brad Hussey Bootstrap videos - https://www.youtube.com/playlist?list=PLUoqTnNH-2Xz_BUrjcahKWDhPcUj-FTOt

Mock on the task done at the end of training.

Queries related to task completed daywise must be kept in the document which I have shared with you all.

PS: - Project 1 plan to be kept inside your repository which you are going to create. Also, 
keep your errors documentation and solution document which is shared inside the repository too. 



DAY TWO TASK - 
---------------------------------------------------

Before Lunch - 
1. Create Login Page and Register page using bootstrap form components class.
2. Create Product Details Page.
3. Creating links between the three pages.
4. Clicking on informational area image and link based on categories or products as per your project move to the details page  

After Lunch - 

5. Add dependencies for implementing Spring in pom.xml
6. Create the Dispatcher Servlet
7. Implement Navigation between LandingPage, Login Page and Register Page using Spring.
8. Fix the "image not coming after implementing Spring Controller" Issue (Loading Static Resources)
9. Create a common directory for all the images, js, css and font file. Update it in your project.

Gontu Series Videos Links which I have already shared with you all: -

Spring Framework Tutorial - https://www.youtube.com/watch?v=pU-4NybcjnE&list=PLBgMUB7xGcO1YY1J9NoXssmaB0FjLSbQ5 (1 to 3)
Spring Web Mvc - https://www.youtube.com/watch?v=iCQspqBpOB0&list=PLBgMUB7xGcO31B2gBmy1igpZn6LK78-CJ (1 to 9)

Loading Static Resources
------------------------------------------
Web Reference: -  
http://crunchify.com/spring-mvc-4-2-2-best-way-to-integrate-js-and-css-file-in-jsp-file-using-mvcresources-mapping/
(for maven project instead of WebContent it would be webapp)
https://www.mkyong.com/spring-mvc/spring-mvc-how-to-include-js-or-css-files-in-a-jsp-page/

Video Reference: - 
https://www.youtube.com/watch?v=OuSElmnstN8&index=6&list=PLAXbOMavY3k1VJGqqhfqAn0tUSC14Qsvq

General Project Development
------------------------------------------
General	Scrum vs. Traditional Project Management - https://www.youtube.com/watch?v=wx1UU7hhvbA
General	Scrum Processes - https://www.youtube.com/watch?v=5FvK6zHzA4c
General	Code Ethics - https://www.youtube.com/watch?v=4E3xfR6IBII

DAY THREE TASK - 
---------------------------------------------------

1. Understanding the DAO pattern.
2. Create model class Product with the following parameters(ID, Brand, Name, Description, Price, Quantity, Category, Supplier). Similarly create for Category and User
3. Implement DAO Pattern to get the data as a list from the model into controller and use the list as a datasource for the data table in Products Page using DataTable.
4. Route to a ProductDetails Page from the product page on clicking on a button which will show the details of the product for which more info is required.

Video Link: - 
https://www.youtube.com/watch?v=9fVQ_mvzV48
https://www.youtube.com/watch?v=H1mePFyqqiE

Reference Link: -

http://howtodoinjava.com/spring/spring-core/how-to-use-spring-component-repository-service-and-controller-annotations/
http://howtodoinjava.com/spring/spring-core/spring-beans-autowiring-concepts/


Quiz from DAY 2


What is the advantage of using Git over other version control system? Are there any version control system similar to Git?
Write down the basic commands of git along with its usage?
Explain the build lifecycle of Maven.
What is inversion of control (IOC) and dependency injection in Spring?
Write down the dependency element that you have used in pom.xml to work with Spring WebMvc? 

/*
    Steps to get the datatable working
*/
1. Create a controller and add the @ResponseBody annotation to the method

2. Use the autowiring functionality to use the DAO inside your controller

3. Needs a converter for converting Java Object to JSON so use jackson-databind dependency

4. Check the data coming inside Postman extension by typing in the mapping which you created.

5. Install the datatables plugin (you can use bower to make your job easier and add it to assets and link it on your page)

6. Create your own javascript file and add the jQuery code (refer the documentation send on email)
    P.S. use the mapping you have created in datatable ajax src property


Login Form using Spring MVC and Hibernate	https://www.youtube.com/watch?v=DqLxUYJ8D1E
Add,Edit,Delete,Search using Spring and Hibernate	https://www.youtube.com/watch?v=rdYQOqxq9F0
Introduction To Transaction Management	https://www.youtube.com/watch?v=HcjHJLEbtRs
HIbernate + Spring 3.0 + Spring Transaction	https://www.youtube.com/watch?v=XCel3zpOkSE
INSTALLING AND STARTING H2 DATABASE DEMO	https://www.youtube.com/watch?v=1BkvXEv65Z8
H2 database. How to use for beginners.	https://www.youtube.com/watch?v=ptajUIqk_Ao
Hibernate Tutorial 01 - Introduction To Hibernate	https://www.youtube.com/watch?v=Yv2xctJxE-w&list=PL4AFF701184976B25
Hibernate Tutorial 02 - Setting Up Hibernate	https://www.youtube.com/watch?v=bzPkebUXxn0&list=PL4AFF701184976B25&index=2
Hibernate Tutorial 03 Part 1- Writing a Hibernate Application	https://www.youtube.com/watch?v=N2F1zCAf_NU&list=PL4AFF701184976B25&index=3
Hibernate Tutorial 03 Part 2- Writing the Model Class with Annotations	https://www.youtube.com/watch?v=3eXjpve0QaI&index=4&list=PL4AFF701184976B25



1. Adding Dependencies for implementing Spring Hibernate ORM with H2 Database


2. adding applicationContext.xml and connect it using web.xml
3. Create Beans for DataSource, SessionFactory, TransactionManager in applicationContext.xml file. After successful configuration, a table Product should get created in H2 database.
4. Put some sample data in the table and it should be retrieved in the Products Page in the datatable.
5. Write the Junit test cases for checking the DAO classes





1. Adding dependencies for implementing Spring Hibernate ORM with H2 database.


We would be requiring the following dependencies.




Q1. What are the different core types available in Javascript?

Q2. Draw the architecture for spring web mvc framework. 

Q3. Write the bean element for resolving the view added in spring bean configuration file.

Q4. What are the different ways in which you can write a jquery document ready function?

Q5.  Explain @Component, @Controller, @Repository, @Service and @RestController annotations.



/*
    STEPS TO COMPLETE TODAYS ASK
*/

1. Create an applicationContext.xml file.
2. Configure it with the following beans
DataSource - to provide database connectivity information.
SessionFactory - to creation session using the datasource bean and scan the packages for finding the entity
HibernateTransactionManager - to manage transaction
3. Modify your web.xml to load the applicationContext bean.
4. Modify the model class to make it an entity class using persistence annotations.
5. Test your project for hibernate configuration by creating the table using hibernate.hbm2ddl.auto.

Q1. Dependecies that are automatically added adding spring-orm dependency?






1. Add the dependencies 
    spring-orm 
    h2Database
    hibernate-core
    commons-dbcp2

2. We have created an applicationContext.xml file

3. We are going to load the applicationContext.xml taking help of web.xml by adding the ContextLoaderListener class

4. Add three beans inside the applicationContext and move the entire configuration that is required
at the application level from dispatcher-servlet (will have only viewResolver)

5. 
DataSource - (Provides database connectivity information)
SessionFactory - (uses dataSource bean to product a session for database transaction also we are
    going to set the hibernate properties
)

HibernateTransactionManager (to manage transaction)

<tx:annotationDriven transaction-manager=""/>

6. Modify your Product class and change it to an entity (@Entity &b @Id)

7. Remove your static list code and a hibernate related one to get the data from the database

    autowire SessionFactory use the getCurrentSession 

        To Fetch Multiple Product  - createQuery    -  getResultList 
        use get method to fetch a single product!





1. To complete the JUnit test case first


Q1. Write down the keyboard shortcut for the following in eclipse
    a. Updating Maven Project - Alt + F5
    b. Organizing Import - Ctrl + Shift + O 
    c. Code Formatting - Ctrl + Shift + F
    d. Code Commenting - Single Line - Ctrl + /   & MultiLine - Ctrl + Shift + /
    e. Quickly - Opening a file - Ctrl + Shift + R

Q2. Write down the code inside a bootstrap container class to display 4 columns in large devices, 3 columns on medium devices, 2 columns on small devices and 1 column on mobile devices.

Q3. Draw the hibernate architecture.

Q4. What is database connection pooling?

Q5. What is Unit Testing?    


1. Copied the applicationContext file and added the bean we want to test for autowiring


2. 
<dependency>
    <groupId>org.springframework</groupId>
    <artifactId>spring-test</artifactId>
    <version>3.1.2.RELEASE</version>
    <scope>test</scope>
</dependency>





Mukesh Kumar - https://github.com/mukeshkumarjangid6/NiitPro



Project 1 after deletion: - 
----------------------------------------------------------------------------

Chirag Singla - https://github.com/chiragsingla8802/GoToHotel 
Neha Pant - https://github.com/Neha-Pant/ZenSports
Vikas - https://github.com/mvikasgithub/Electro-World
Lopamudra - https://github.com/LopaB/Final-HealthMedicineQuest 




DAY FIVE A




1. Writing Test Cases to work with ProductDAO
2. Create a new page for Administrator using Spring forms through which he can add, edit, delete any product. He should also be able to see the existing products across all categories
3. Create a separate Controller class for Admin for supporting transfer of data and routing.
4. Implement CRUD operations through ORM for the page. Here all the mapping should move us to the same page.














/*
    use the following in case of errors while working with spring-security
*/

<webflow:flow-executor id="flowExecutor">
        <webflow:flow-execution-listeners>
            <webflow:listener ref="securityFlowExecutionListener" />
        </webflow:flow-execution-listeners>
</webflow:flow-executor>

<!-- Installs a listener to apply Spring Security authorities -->
    <bean id="securityFlowExecutionListener"
          class="org.springframework.webflow.security.SecurityFlowExecutionListener" />





|----------------------------------------------------------------------------------------------------
| Handle Registration Process using spring-webflow - Spring webflow dependency and configuration
|----------------------------------------------------------------------------------------------------

1. Let us solve the View Product active menu problem which came after coding previously from home.
    we will be adding a new case and break it without adding class

2. Add two more links to navbar.jsp i.e. one for registration and another one for login.
    <!-- Link for registration -->
    <li id="register">
        <a href="${contextRoot}/register">Registration</a>
    </li>
    <!-- Link for login -->
    <li id="login">
        <a href="${contextRoot}/login">Login</a>
    </li>

3. Load the webflow dependency at the right place.
    <dependency>
        <groupId>org.springframework.webflow</groupId>
        <artifactId>spring-webflow</artifactId>
        <version>2.4.4.RELEASE</version>
    </dependency> 
    org.springframework.webflow --> spring-webflow -> 2.4.4.RELEASE

4. Add the webflow namespace in the dispatcher-servlet.xml file.

    webflow-config --> spring-webflow-config

5. Add the flow-executor that will handle the flow indicating the entry point in the project.

    <wf:flow-executor id="flowExecutor" />

6. Add the flow-registry for finding the flow you have setup for the application.

    <wf:flow-registry 
			id="flowRegistry" 
			flow-builder-services="flowBuilderServices"
			base-path="/WEB-INF">
		<wf:flow-location id="register" path="/membership-flow.xml"></wf:flow-location>
	</wf:flow-registry>


7. To customize the flow-registry and provide additional configuration we are going to use the flow-builder-services.

    	<wf:flow-builder-services id="flowBuilderServices"
	    	view-factory-creator="viewFactoryCreatory"
    	/>

8. Bean to handle the flow
    <bean class="org.springframework.webflow.mvc.servlet.FlowHandlerAdapter">
		<property name="flowExecutor" ref="flowExecutor" />
	</bean>

9. Bean to handle the mapping read from the registry i.e. the XXX-flow.xml file.
	<bean class="org.springframework.webflow.mvc.servlet.FlowHandlerMapping">
		<property name="flowRegistry" ref="flowRegistry" />
		<property name="order" value="0" />
	</bean>


10. The first bean we will add is related to resolving the view for web flow. It is for specifying the view - 
        view-factory-creator="viewFactoryCreatory"
        <!-- for resolving the view in flow -->
        <bean id="viewFactoryCreator"
		    class="org.springframework.webflow.mvc.builder.MvcViewFactoryCreator">
            <property name="viewResolvers">
                <list>
                    <ref bean="viewResolver" />
                </list>
            </property>
    	</bean>

|----------------------------------------------------------------------------------------------------
| Handle Registration Process using spring-webflow - Flow Configuration
|----------------------------------------------------------------------------------------------------




1. Create a membership-flow.xml file and add the following configuration -  

<?xml version="1.0" encoding="UTF-8"?>
<flow xmlns="http://www.springframework.org/schema/webflow"
      xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
      xsi:schemaLocation="http://www.springframework.org/schema/webflow
                          http://www.springframework.org/schema/webflow/spring-webflow.xsd">
 
</flow>

2. Create a User and Address class here we will learn the concept of one to many mapping where a user can have many addresses. 

3. Create a bean called as RegistrationBean which will be available during the entire registration flow and will consist of another objects i.e. User, Address - billing address (which is mandatory) and another address i.e. Shipping address which remains optional.

4.  

Many To One 

Table address has many records in table user.
        A                               B
One To Many

Table user has many records in table address.
        B                               A










Why we require a flow? 
    In many of the web application a flow is natural process where the user will have to go through 
    certain steps to complete that entire flow which could be related to anything 

e.g.: -
    
while registration we can ask the user to confirm the details giving a chance to edit the details once before finally persisting it to the database.
    user enters the registration details -> clicks on submit -> chance to rectify it -> finally welcoming and asking for login again.

while checkout in an ecommerce application we have to store the data temporarily not in a session but till the time of the flow.
    checkout -> will be asked to enter or select an address -> select a payment method -> order receipt -> continue shopping



Scoping 
    As per the servlet specification we have three scopes in which we can maintain the state information.
appplication - for the entire application level.
session - for every client that can die when it is requested by you, by developer or the session timeout kicks in.
request - lives through one request processing life lifecycle

Webflow - provides extra scope (conversation, flow, view, flash, and request)

Keep http session small - 

Memory usage.
Session replication.
Housekeeping

POST REDIRECT GET (PRG)

When the request (an HTTP POST) enters the web container, 
it executes the requested logic. 
Instead of rendering the view and sending an HTTP 200 (+ view data) web flow will send a 302 Redirect to the clients browser
At this point, the flow execution is "paused" and state is internally stored for you. The mechanism to store the state between requests is all handled by web flow.


The browser will follow the redirect and issue an HTTP GET to the web container. Here web flow picks up the request again and lets the view be rendered. The view is eventually sent back to the client's browser and displayed.

If you remember the last action was not a POST, but a GET. If the user presses F5, the (idempotent) GET is executed without any side effects; it merely returns the last view without (double) processing the same logic again. Thus there is no chance of accidental re-submit of a form. You get all the functionality for free COOL!




|----------------------------------------------------------------------------------------------------
| Handle Registration Process using spring-webflow - User and address class
|----------------------------------------------------------------------------------------------------

1. Let us first create the User class with the following field.

class User {

    private String firstName;
    private String lastName;
    private String email;
    private String contactNumber;
    private String role;
    private boolean enabled;
    
}

create table User (
    id integer not null,
    contactNumber varchar(255),
    email varchar(255),
    enabled boolean not null,
    firstName varchar(255),
    lastName varchar(255),
    role varchar(255),
    primary key (id)
)


2. Let us add the Address class with the following field: -  
class Address {

    private String addressLineOne;
    private String addressLineTwo;
    private String state;
    private String city;
    private String pincode;
    private String country;
    private String landmark;

    private boolean billing; // mandatory 
    private boolean shipping; // optional
    

    @ManyToOne(cascade = CascadeType.ALL)
    @JoinColumn(name = "foreign_key_field") // use @JoinColumn for assigning the foreign key field in address table which is linked with a user so user can have multiple addresses.
    private User user;

    public User getUser() {
        return this.user;
    }

    public void setUser() {
        this.user = user;
    }

}

NOTE: - 
1. ManyToOne - will be used in unidirectional but address have to be stored manually

   OneToMany (mappedBy = "user") to indicate the relationship owner. - will be used to store the address and the queries will be executed only for insertion and not for the extra update if multiple addresses are attached.

   Its always better to write a separate addUserAddress method as it will reduce the overhead of calling the udpate over each address we still use lazy intialize and enjoy the benefits of it.
 

   LazyInitializationException will occur in a relationship only when we have lazily initialized the other entity then we have to call the getter method within the transactional context.

3. Add the cart table.

One to One relationship 

Number of rows in Table A = Number of Rows in Table 

Having a one-to-one relationship and having the same id as the user for cart will help to fetch the cart for a user.

@Id
@GeneratedValue(generator = "mygenerator")
@GenericGenerator(name = "mygenerator", strategy = "foreign", parameters = {@Parameter(value = "user", name="property")})
private int id;

@OneToOne(cascade = CascadeType.ALL, fetch = fetchType.EAGER)

private User user;

3. Add a Cart class for those who will be registering themselves as a customer.

4. Add a DAO method for adding a User along with Cart and address if selected.

5. Create a separate model having two address and a separate user object that we will require in our flow.

package net.kzn.onlineshopping.model;

import net.kzn.shoppingbackend.dto.Address;
import net.kzn.shoppingbackend.dto.User;

public class RegisterModel {

	private User user;
	
	private Address billing;
	
	private Address shipping;
	
	private boolean shippingIsSame;

	public User getUser() {
		return user;
	}

	public void setUser(User user) {
		this.user = user;
	}

	public Address getBilling() {
		return billing;
	}

	public void setBilling(Address billing) {
		this.billing = billing;
	}

	public Address getShipping() {
		return shipping;
	}

	public void setShipping(Address shipping) {
		this.shipping = shipping;
	}

	public boolean isShippingIsSame() {
		return shippingIsSame;
	}

	public void setShippingIsSame(boolean shippingIsSame) {
		this.shippingIsSame = shippingIsSame;
	}
		
	
}


6. Create the flow.xml file to execute the flow.


7. Create the RegisterHandler class that will work with the membership flow.

8. 




DAY 9 TASK: - 
--------------------------------------
Before Lunch
1. Creating the User entity class
2. Testing the UserDAO by Junit Testing
3. Register a user as customer or supplier
-------------------------------------------
After Lunch
4. Understanding Role Based Authentication and Authorization
5. Adding Spring Security Dependencies
6. Modifying web.xml to work with Spring Security





    addressLineOne;
    addressLineTwo;
    state;
    private String city;
    private String pincode;
    private String country;
    private String landmark;

    private boolean billing; // mandatory 
    private boolean shipping; // optional
	







<c:forEach items="${flowRequestContext.messageContext.getMessagesBySource('userId')}" var="err">
					  <div><span>${err.text}</span></div>
					</c:forEach><br />


What is the difference between persist, sava and saveOrUpdate method.
What is the difference between ServletContext and ServletConfig?
What is http multipart request? Which attribute and corresponding value is added to form element to indicate it?
What is Post Redirect Get (PRG)?
What are the different scopes available in servlet specification? How many scopes does web flow provides?









|----------------------------------------------------------------------------------------------------
| Handling User Registration Using Spring Webflow 
|----------------------------------------------------------------------------------------------------

1. Adding the dependencies
    	<!-- Spring WebFlow -->
		<dependency>
			<groupId>org.springframework.webflow</groupId>
			<artifactId>spring-webflow</artifactId>
			<version>2.4.4.RELEASE</version>
		</dependency>

2. Need to configure spring web flow in the dispatcher. For this we required the namespace


	xmlns:wf="http://www.springframework.org/schema/webflow-config"


    http://www.springframework.org/schema/webflow-config
    http://www.springframework.org/schema/webflow-config/spring-webflow-config.xsd    

3. We need to do the webflow configuration  

	<wf:flow-executor id="flowExecutor" />


	<wf:flow-registry id="flowRegistry"
		flow-builder-services="flowBuilderServices" base-path="/WEB-INF">
		<wf:flow-location id="register" path="/membership-flow.xml"></wf:flow-location>
	</wf:flow-registry>
    
    NOTE: the id in flow-registry -> flow-location is register
    Even if we don't specify the path it will look for a file with name re
    Same would be used in navbar
    	                <li id="register">
	                        <a href="register">Registration</a>
	                    </li>

    <wf:flow-builder-services id="flowBuilderServices"
		view-factory-creator="viewFactoryCreator" />

4. Add the following beans: 
	<!-- Need to set up the beans to provide configuration information for execution of the flow -->
	<!-- the flow executor -->	
    <bean class="org.springframework.webflow.mvc.servlet.FlowHandlerAdapter">
		<property name="flowExecutor" ref="flowExecutor" />
	</bean>

	<!-- for handling the mapping used in flow -->
	<bean class="org.springframework.webflow.mvc.servlet.FlowHandlerMapping">
		<property name="flowRegistry" ref="flowRegistry" />
		<property name="order" value="0" />
	</bean>

	<!-- for resolving the view in flow -->
	<bean id="viewFactoryCreator"
		class="org.springframework.webflow.mvc.builder.MvcViewFactoryCreator">
		<property name="viewResolvers">
			<list>
				<ref bean="viewResolver" />
			</list>
		</property>
	</bean>
    

5. Creating the membership-flow.xml file

<?xml version="1.0" encoding="UTF-8"?>
<flow xmlns="http://www.springframework.org/schema/webflow"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/webflow
	http://www.springframework.org/schema/webflow/spring-webflow-2.4.xsd">


    <!-- It will create an instance and keep it inside flowScope -->
	<var name="user" class="net.kzn.shoppingbackend.dto.User"/>


	<on-start>
		<evaluate expression="registerHandler.initFlow()" result="flowScope.registerModel"></evaluate>
	</on-start>


    <view-state id="start" view="registration/register" model="user">
		<transition on="submit" to="billingAddress" />
		<on-exit>
			<evaluate expression="registerHandler.saveUser(registerModel,user)"></evaluate>
		</on-exit>
	</view-state>	

    <!-- You can add more view state based on your project -->

    <!-- end state -->
	<end-state id="welcome" view="registration/welcome"/>			
	<end-state id="toCancel" view="index"/>			
	<end-state id="toHome"  view="externalRedirect:contextRelative:/"/>
    
    <!-- global Transition -->
	<global-transitions>
		<transition on="home" to="toHome" />
		<transition on="cancel" to="toCancel" />
	</global-transitions>	

</flow>

6. Create a separate RegisterHandler to write methods which will be used inside the flow.

@Component
public class RegisterHandler {

	
	@Autowired
	private UserDAO userDAO;
    
    // if you have a separate model
	public RegisterModel initFlow() {
		return new RegisterModel();
	}
		
	public void saveRegistrationDetails(RegisterModel registerModel) {				
		
		User user = registerModel.getUser();
		// save the user
		userDAO.add(user);
				
		Address billing = registerModel.getBilling();
		// set the user 
		billing.setUser(user);
		// save the billing address
		userDAO.addUserAddress(billing);				
		// if shipping is not same as billing
		if(!billing.isShipping()) {
			Address shipping = registerModel.getShipping();
			// set the user for shipping
			shipping.setUser(user);
			// save the shipping address
			userDAO.addUserAddress(shipping);
		}
				
		// if user is not supplier
		if(user.getRole().equals("CUSTOMER")) {
			Cart cart = new Cart();
			// set the user
			cart.setUser(user);
			// save the cart
			userDAO.addUserCart(cart);
		}		
	}	

    ...
}

7. You can create the composite model which can have all the other model. A sample model for you all.
public class RegisterModel implements Serializable {

	private static final long serialVersionUID = -1L;

	private User user;
	
	private Address billing, shipping;

}

8. Attach the model attribute with your registration spring bean form. 








|----------------------------------------------------------------------------------------------------
| Handling Authentication and Authorization Using Spring Security 
|----------------------------------------------------------------------------------------------------

1. Add the dependency 

		<!-- Spring Security -->
		<dependency>
			<groupId>org.springframework.security</groupId>
			<artifactId>spring-security-config</artifactId>
			<version>4.2.2.RELEASE</version>
		</dependency>

		<dependency>
			<groupId>org.springframework.security</groupId>
			<artifactId>spring-security-taglibs</artifactId>
			<version>4.2.2.RELEASE</version>
		</dependency>


2. Modify the web.xml file to make every request go through the spring security framework.

    <!-- Loading the configuration file -->

    <listener>
        <listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
    </listener>

	<context-param>
    	<param-name>contextConfigLocation</param-name>
    	<param-value>
    		/WEB-INF/applicationContext.xml, 
    		/WEB-INF/application-security.xml, 
    		/WEB-INF/dispatcher-servlet.xml
    	</param-value>
	</context-param>

    <!-- Spring Security Filter -->
    <filter>
        <filter-name>springSecurityFilterChain</filter-name>
        <filter-class>org.springframework.web.filter.DelegatingFilterProxy</filter-class>
    </filter>
 
    <filter-mapping>
        <filter-name>springSecurityFilterChain</filter-name>
        <url-pattern>/*</url-pattern>
    </filter-mapping>


3. Create an applicationContext file and move the context:componentScan, mvc:annotationDriven and mvc:resources from  dispatcher-servlet to applicationContext.xml


4. Create an application-security.xml file to specify the spring security configuration.

<beans:beans xmlns="http://www.springframework.org/schema/security"
    xmlns:beans="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://www.springframework.org/schema/beans
    http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
    http://www.springframework.org/schema/security
    http://www.springframework.org/schema/security/spring-security-4.0.xsd">

</beans:beans>

5. Use the http - for providing the url to intercept and apply the security.
    <!-- No security for static resources -->
	<http pattern="/resources/**" security="none" />

    <!-- Security for the rest of my mappings -->
	<http>
		<intercept-url pattern="/admin/**" access="hasAuthority('ADMIN')"/>
		<intercept-url pattern="/customer/**" access="hasAuthority('CUSTOMER')"/>
		<intercept-url pattern="/supplier/**" access="hasAuthority('SUPPLIER')"/>
		<intercept-url pattern="/**" access="permitAll"/>
		<form-login login-page="/login" default-target-url="/" authentication-failure-url="/login?error"/>
        <csrf disabled="true"/>
	</http>	

6. Specify the authentication manager 

	<authentication-manager>		
		<authentication-provider>		
			<jdbc-user-service data-source-ref="dataSource" 
				users-by-username-query="SELECT email, password, enabled FROM user WHERE email = ?"
				authorities-by-username-query="SELECT email, role FROM user WHERE email = ?" 				
				/>
		</authentication-provider>	
	</authentication-manager>

NOTE: Since we have to use the dataSource bean from the backend application we have to give the name to the bean.

7. Inside the PageController create a mapping of /login to display the login view.

    // display the login view

	@GetMapping("/login")
	public String login(@RequestParam(value = "error", required = false)String error, Model model) {
		
		if(error!=null) {
			model.addAttribute("error","Authentication Failed - Invalid credentials!");
		}
		
		model.addAttribute("title", "Login");
		return "login";
	}	

8. Create a login form.

    with normal html element (no spring form) specify the action as  (${contextRoot}/login) and method will be POST by default spring security uses /login as the default url for processing the form details.
    The form will have two fields with 

        name - username
        name - password 

9. Add the taglib directive to use the spring security taglibs.

    <%@taglib prefix="security" uri="http://www.springframework.org/security/tags"%>

10. Modify the navbar.jsp and use the spring security tag library for access.

        <security:authorize access="isAuthenticated()">					                                                          						
            <li id="logout">
                <a href="${contextRoot}/logout">Logout</a>
            </li>
        </security:authorize>

THAT's IT ENJOY EVERYTHING FOR FREE by SPRING SECURITY!





    1. Creating the User entity class
    2. Testing the UserDAO by Junit Testing (getUserByUsername, add, update, ....)
    3. Register a user as customer or supplier
    4. Understanding Role Based Authentication and Authorization
    5. Adding Spring Security Dependencies
    6. Modifying web.xml to work with Spring Security



1. Create views for the folowing pages: (no need for mapping only the view )
 a. Cart View
 b. Billing Address
 c. Shipping Address
 d. Payment Option.
 e. Order Receipt"
2. Implement Spring Webflow to implement navigation between these 5 pages.
3. Creating entities necessary to work with the Cart Module and writing test cases for the same.



https://dzone.com/refcardz/spring-web-flow







Creating CartController and writing functionality for the same.
Creating entities necessary to work with the Checkout Module and writing Junit test cases for the same.




|------------------------------------------------------------------------------------------
| Working with custom error handler for page not found, access denied and any exception
|------------------------------------------------------------------------------------------

There are 3 options to handle exception in the application: - 
1. per exception
2. per controller
3. globally

Using HttpStatus Codes

@ResponseStatus (value = HttpStatus.NOT_FOUND, reason = "")
public class OrderNotFoundException extends RuntimeException {
    // ...
} 

now we can explicitly throw the OrderNotFoundException(id);

Controller Based Exception Handling
Using @ExceptionHandler


----> Handle Exception without @ResponseStatus annotation
 // Specify name of a specific view that will be used to display the error:
  @ExceptionHandler({SQLException.class,DataAccessException.class})
  public String databaseError() {
    // Nothing to do.  Returns the logical view name of an error page, passed
    // to the view-resolver(s) in usual way.
    // Note that the exception is NOT available to this view (it is not added
    // to the model) but see "Extending ExceptionHandlerExceptionResolver"
    // below.
    return "databaseError";
  }


---> Redirect the user to a dedicated error view
  @ExceptionHandler(Exception.class)
  public ModelAndView handleError(HttpServletRequest req, Exception ex) {
    logger.error("Request: " + req.getRequestURL() + " raised " + ex);

    ModelAndView mav = new ModelAndView();
    mav.addObject("exception", ex);
    mav.addObject("url", req.getRequestURL());
    mav.setViewName("error");
    return mav;
  }
}

--->

  // Convert a predefined exception to an HTTP Status code
  @ResponseStatus(value=HttpStatus.CONFLICT,
                  reason="Data integrity violation")  // 409
  @ExceptionHandler(DataIntegrityViolationException.class)
  public void conflict() {
    // Nothing to do
  }
  

We will be handling the exception handling in our application using the global configuration for the entire application.

1. Create a class GlobalDefaultExceptionHandler and annotate it @ControllerAdvice

2. We will create a separate ProductNotFoundException class in the exception package.

3. We need to ensure whenever a product is not found the following exception is thrown. 

4. Annotate a method with the @ExceptionHandler to handle that specific exception. 
 
5. Annotate another method for Custom 404 page.

@ExceptionHandler(value = Exception.class)
  public ModelAndView
  defaultErrorHandler(HttpServletRequest req, Exception e) throws Exception {
    // If the exception is annotated with @ResponseStatus rethrow it and let
    // the framework handle it - like the OrderNotFoundException example
    // at the start of this post.
    // AnnotationUtils is a Spring Framework utility class.
    if (AnnotationUtils.findAnnotation
                (e.getClass(), ResponseStatus.class) != null)
      throw e;

    // Otherwise setup and send the user to a default error-view.
    ModelAndView mav = new ModelAndView();
    mav.addObject("exception", e);
    mav.addObject("url", req.getRequestURL());
    mav.setViewName(DEFAULT_ERROR_VIEW);
    return mav;
  }


Good Exception Handling
User
-------------------
-->Give user something to refer back say an id.
Support Team
-------------------
-->Given an id developer can easily understand the context of the exception.
-->Log the exception details.
-->Do not handle the exception unless you know what to do with it.



|------------------------------------------------------------------------------------------
| Enabling logging. 
|------------------------------------------------------------------------------------------

The Simple Logging Facade for Java (SLF4J) serves as a simple facade or abstraction for various logging frameworks, such as java.util.logging, logback and log4j. SLF4J allows the end-user to plug in the desired logging framework at deployment time.

1. We will be excluding the commomns-logging from the spring-context to use slf4j only thing we have to user the jcl-over-slf4j dependency.

    <dependency>
        <groupId>org.springframework</groupId>
        <artifactId>spring-context</artifactId>
        <version>${spring.version}</version>
        <exclusions>
           <exclusion>
              <groupId>commons-logging</groupId>
              <artifactId>commons-logging</artifactId>
           </exclusion>
        </exclusions>           
    </dependency>

2. We will be using the logback classic which implements slf4j directly
    <dependency>
        <groupId>ch.qos.logback</groupId>
        <artifactId>logback-classic</artifactId>
        <version>1.2.1</version>
    </dependency>
    <dependency>                                    
        <groupId>org.slf4j</groupId>                
        <artifactId>jcl-over-slf4j</artifactId>     
        <version>1.7.24</version>  
    </dependency>

3. Create a separate logback.xml file in the src-->main-->resources directory.
    It will consist of the following elements

                    |--appender (name, class)
                    |       |----encoder
                    |               |--- Pattern
                    |
    configuration---|
                    |--logger (name, level, additivity)
                    |   |--appender-ref (ref)
                    |
                    |--root (by default level is DEBUG so keep it simple to INFO)
                        |--appender-ref (ref)


4. We will add an appender for the console first using 
        
<appender name="consoleAppender" class="ch.qos.logback.core.ConsoleAppender">
    <encoder>
        <Pattern>%-5level - %msg - %d{HH:mm:ss.SSS} %logger{36} %n</Pattern>
    </encoder>
</appender>

Given is description for the various pattern output: 

%-5level – means the level of the logging event should be left justified to a width of five characters
%msg – outputs the application-supplied message associated with the logging event.
%d{HH:mm:ss.SSS} – Used to output the date of the logging event.
%logger{36}  – outputs the name of the logger at the origin of the logging event. It takes an integer 
%n – outputs the platform dependent line separator character or characters.

5. We will use it inside our controller let us first test it with the PageController.






